RAILS Helpers

Lista com os helpers nativos do rails que são usados com maior frequencia.

--------------------------------------------------------------------------

link_to #
	link_to(nome, destino)

	Helper que ser para a criação de um elemento <a> com conteudo e href indicados como paramentros.

		EXEMPLO:
			<%= link_to "Menu", "index.html" %> || <%= link_to "Menu", model_path %>

			RESULTADO:
				<a href="index.html">Menu</a>
#

image_tag #
	image_tag(url: "image", size: "widthxheight", alt: "descrição da imagem")

	Helper que ajuda na criação de uma tag <img> recebe como parametro o endereço e outras propriedades opcionais, sendo o tamanho como size: laguraxaltura mais comum e alt que refereci a propriedade alt mesmo.

		EXEMPLO:
		      <%= image_tag(@coin.url_image, size: "64x64", alt: "#{coin.name}_image") %>

		      RESULTADO:
		      	<img src="url_da_imagem" width="64px" height="64px" alt="nome_da_moeda_imagem">
#

form_with #
	form_with(model: model, local: true) do |form| 
		form.label
		form.text_field
		form.submit
	end

	Helper que ajuda na criação de forms, basicamente é um helper que recebe um elemento, do nosso model e nos permite criar um form que irá carregar esse elemento.

		EXEMPLO: Observe que ele associa cada campo da model a um elemento do form
			<%= form_with(model: coin, local:true) do |form| %>
				<% if coin.errors.any? %><% end %> -------> Padrão para messages de erro.
				<div class="field">
				    <%= form.label :name %>
				    <%= form.text_field :name %>
				</div>

				<div class="field">
				    <%= form.label :acronym %>
				    <%= form.text_field :acronym %>
				</div>

				<div class="field">
				    <%= form.label :image_URL.capitalize %>
				    <%= form.text_field :url_image %>
				</div>

				<div class="actions">
				    <%= form.submit %>
				</div>	
			<% end %>
#

respond_to #
	respond_to do |format|
		if model.save
			format.html {...}
			format.json {...}
		else
			format.html {...}
			format.json {...}
		end
	end

	Helper que defini um resposta condicionada ao successo ou não da persistencia dos dados, ou seja, é um metodo que responde ao http request, esse helper pode também definir o formato da resposta, por padrão pode ser em html ou json, outros retornos precisam ser configurados via código.

		EXEMPLO:
			respond_to do |format|
			    if @coin.save
			        format.html { redirect_to @coin, notice: 'Coin was successfully created.' }
			        format.json { render :show, status: :created, location: @coin }
			    else
			        format.html { render :new }
			        format.json { render json: @coin.errors, status: :unprocessable_entity }
			    end
			end
#

redirect_to #
	redirect_to(destino, notice: "any_message")

	Esse helper posibilita o redirecionamento para qualquer outro path indicado podendo ou não apresentar uma notice, com alguma aviso:

		EXEMPLO:
			redirect_to @coin, notice: 'Coin was successfully created'

			Redireciona ao path relativo de coin e apresenta a informação 'Coin was successfully created' caso o parametro notice seja tratado.
#