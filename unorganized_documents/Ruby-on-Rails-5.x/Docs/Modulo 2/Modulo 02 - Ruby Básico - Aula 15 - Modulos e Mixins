MODULO 02 - Rúby Básico

AULA 15 - Módulos e Mixins
-----------------------------------------------------
MÓDULOS

No ruby modulos são semelhantes a classes, no entanto, um modulo representa uma coleção de dados, classes, metodos, constantes e incluse outros módulos do Ruby. Ou seja, é possível ter mais de uma classe ou mais de um módulo dentro de um unico modulo. No entanto, modulos não são instanciaveis, não é possível criar um objeto apartir de um módulo e não é permitida a henrança entre modulos. Modulos são mais utilizados para centralizar constantes e dados, pois, módulos podem ser injetados em qualquer classes ou em outros metodos.

Modulos agem como namespace, permitido que você defina métodos cujo os nomes não irão colidir com aqueles definidos em outras artes de um programa.

Um exemplo de uso do namespace seria se por exemplo você possui uma classe ou um metodos que já existe em outra parte do programa, porém, você não deseja necessáriamente subscrever ou colidir com ele, desta forma namespaces diferenciam esses metodos e ou classes.

Módulos permite que você compartilhe funicionalidade entre outras classes fazendo um 'mixes in' ou 'mixins'

EXEMPLO COM CONSTANTES
	# Arquivo modulos.rb
		module Pagamento
	    	PI = 3.14
		end

	# Arquivo RB que usará o modulo.
		require_relative 'modulos' 

		include Pagamento 

		puts Pagamento::PI #Sempre que é usado :: trata-se do uso de um modulo.

	# Saída no terminal
		3.14

	OBS: 

	'require_relative' pede que o arquivo 'modulos.rb' seja carregado em memória, require_relativo, pois esta na mesma pasta
	
	'include' pede que seja incluido o modulo de pagamento, é necessário especificar o modulo, pois em um mesmo arquivo seria possível ter inumeros modulos e eles não são incluidos automaticamente é necessário informar o modulo a ser inserido.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
EXEMPLO COM MÉTODOS

	# Arquivo modulos.rb
		module Pagamento
		    def pagar(bandeira, numero, valor)
		        "Pagamento com cartão #{bandeira} numero #{numero} no valor de #{valor}"
		    end
		end

	# Arquivo RB que usará o modulo.
		require_relative 'modulos' 

		include Pagamento 

		puts Pagamento::pagar("Master", 5464648732648732823629876, 15.00)

	# Saída no terminal
		Pagamento com cartão Master numero 5464648732648732823629876 no valor de 15.0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
EXEMPLO COM CLASSES

	# Arquivo modulos.rb
		module Pagamento
		    class Titular
		        attr_accessor :nome, :email
		    end
		end

	# Arquivo RB que usará o modulo.
		require_relative 'modulos' 

		include Pagamento 

		p = Pagamento::Titular.new

		p.nome = "Lucas"
		p.email ="mohamed28.lucas@gmail.com"

		puts p.nome
		puts p.email

	# Saída no terminal
		Lucas
		mohamed28.lucas@gmail.com

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
EXEMPLO MODULO DENTRO DE MODULO

	# Arquivo modulos.rb
		module Pagamento
		    module Pagador
		        def pagar
		            "Pagando...."
		        end
		    end
		end

	# Arquivo RB que usará o modulo.
		require_relative 'modulos' 

		include Pagamento::Pagador

		puts Pagamento::Pagador.pagar

	# Saída no terminal
		Pagando....

OBS: que neste caso 'necessário incluir o modulo Pagamento e o  modulo Pagador (include Pagamento::Pagador)